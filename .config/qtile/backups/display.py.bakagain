

##############################################
##|  _ \_ _/ ___||  _ \| |      / \\ \ / /  ##
##| | | | |\___ \| |_) | |     / _ \\ V /   ##
##| |_| | | ___) |  __/| |___ / ___ \| |    ##
##|____/___|____/|_|   |_____/_/   \_\_|    ##
##############################################

from typing import List  # noqa: F401

from libqtile import bar, layout, widget, qtile, extension
from libqtile.config import Click, Drag, Group, Screen, Match
from libqtile.lazy import lazy
from libqtile.command import lazy
#from libqtile.utils import guess_terminal
import os
import subprocess

#The following lines define a color theme depending on Pywal, then general appearances

colors = []
cache='/home/bastien/.cache/wal/colors'
def load_colors(cache):
    with open(cache, 'r') as file:
        for i in range(8):
            colors.append(file.readline().strip())
    colors.append('#ffffff')
    lazy.reload()
load_colors(cache)
   
transparent_color = '#00000000'
background_color = colors[0]
font_color = colors[8]
active_font_color = colors[0]
border_color = colors[3]
focus_color = colors[2]
floating_border_color = colors[7]
floating_focus_color = colors[5]

#### these inits are defined here but used in config.py and screen.py

def init_gradient():    
    return [
        [colors[1], colors[2], colors[3]], 
        [colors[2], colors[3], colors[4]],
        [colors[3], colors[4], colors[5]],
        [colors[4], colors[5], colors[6]],
        [colors[5], colors[6], colors[7]],
        [colors[1], colors[3], colors[7]],
        [colors[2], colors[4], colors[6]],
        [colors[1], colors[5], colors[7]],
        ]
gradient = init_gradient()

def init_layout_theme():
	return {"margin":4,
			"border_width":4,
			"border_focus":focus_color,
			"border_normal":border_color,
            }
layout_theme = init_layout_theme()


def init_floating_layout_theme():
	return {"margin":4,
			"border_width":4,
			"border_focus":floating_focus_color,
			"border_normal":floating_border_color,
			}
floating_layout_theme = init_floating_layout_theme()

def init_menu_theme():
	return {"dmenu_lines":12,
			"background":background_color,
		    "foreground":font_color,
			"selected_background":focus_color,
			"font":'Luxi Mono Regular',
			"fontsize":12,
			"dmenu_prompt":'>>',
			"dmenu_ignorecase":True				
			}			
menu_theme = init_menu_theme()

## here start the display

widget_defaults = dict(
    font='Luxi Mono Regular',
    fontsize=12,
    padding=8,
    margin=8,
    foreground=font_color
)
extension_defaults = widget_defaults.copy()

panel_height=24



def powerline_arrow(direction, textxy, color1, color2):
    if direction == "r":
        return [
            widget.Sep(padding=0, linewidth=0, background=color2),
            widget.TextBox(
				font='Hurmit Nerd Font',
                text=textxy,
                padding=0,
                foreground=color1,
                background=color2,
                fontsize=panel_height,
            ),
        ]
    else:
        return [
            widget.TextBox(
				font='Hurmit Nerd Font',
                text=textxy,
                foreground=color2,
                padding=0,
                background=color1,
                fontsize=panel_height,),
            widget.Sep(padding=0, linewidth=0, background=color1),
        ]

def double_powerline_arrow(direction, textxy, color1, color2, color3):
     if direction == "r":
        return [
            *powerline_arrow(direction, textxy, color1, color2),
            widget.Sep(padding=0, linewidth=0, background=color2),
            *powerline_arrow(direction, textxy, color2, color3),
         ]
     else:
        return [
            *powerline_arrow(direction, textxy, color3, color2),
            widget.Sep(padding=0, linewidth=0, background=color2),
            *powerline_arrow(direction, textxy, color2, color1),
         ]

   
### defining the unicode separately allows variations, although we also want a general definition
def init_right_arrow():
    return [u"\ue0c0"]
basic_r_arrow = init_right_arrow()

def init_left_arrow():
    return [u"\ue0c2"]
basic_l_arrow = init_left_arrow()

screens = [
    Screen(
        top=bar.Bar(
            [
                *powerline_arrow("r", *basic_r_arrow, background_color, gradient[0]),
                

                widget.Image(filename='~/.config/qtile/icons/python-highcontrast.png',
					mouse_callbacks= {
                    'Button1': lazy.spawn('rofi -show drun'),
                    'Button2': lazy.spawn("kitty"),   
                    'Button3': lazy.run_extension(extension.DmenuRun(**menu_theme))},
					background=gradient[0],
					margin_x = 8
                    ),	
                widget.Prompt(prompt="$ => ", background=background_color),
				*powerline_arrow("r", *basic_r_arrow, gradient[0], background_color),

                widget.GroupBox(
					active=gradient[0],
					inactive=font_color,
					rounded=True,
                    highlight_method='border',
                    fontsize=14,
					this_screen_border=gradient[7],
					this_current_screen_border=gradient[0],
					urgent_border=floating_border_color,
					urgent_text=floating_focus_color,
					background=background_color,
					),
       	        *powerline_arrow("r", *basic_r_arrow, background_color, gradient[2]),
            	
                         
                widget.CurrentLayoutIcon(
                    custom_icon_paths= ['/home/bastien/.config/qtile/icons/'],
                    background=gradient[2],
                    padding = 25,
                    scale=0.8,
				    ),
                *powerline_arrow("r", *basic_r_arrow, gradient[2], background_color),
                
                widget.TaskList(
                    background=background_color,
                    foreground=font_color,
                    highlight_method='block',
					border=gradient[7],
					urgent_border=gradient[0],
					max_title_width=64,
					rounded=True,
					markup=True,
					markup_minimized="<b>{}</b>"),
              *powerline_arrow("r", *basic_r_arrow, background_color, gradient[4]),

                widget.Image(filename='~/.config/qtile/icons/gtk-select-font.png',
				    mouse_callbacks= { 
					'Button1':lazy.run_extension(extension.DmenuRun(**menu_theme, dmenu_command='clipmenu')),
                    'Button3':lazy.spawn('xclip -selection clipboard blank')},                             
                    background=gradient[4],
                    margin_x = 8 
                    ), 
                widget.Clipboard(
					fmt='{}',
					fontsize=12,
					foreground=font_color,
					background=gradient[4],
					max_width=96,
					timeout=4, 
					mouse_callbacks={
                        'Button1':lazy.run_extension(extension.DmenuRun(**menu_theme, dmenu_command='clipmenu')),
                        'Button3':lazy.spawn('xclip -selection clipboard blank')}),                               
       		*powerline_arrow("r", *basic_r_arrow,gradient[4], background_color),
                               #widget.Spacer(background=background_color),	
              
              widget.Image(filename='~/.config/qtile/icons/vim.png',
                      background=background_color,
					  mouse_callbacks={
                          'Button1':lazy.spawn('kitty -e nvim /home/bastien/.config/qtile/keys.py')}),                               
               widget.Chord(
                        background=background_color,
                        fmt= '{}',
                        fontsize = 18,
                            chords_colors={
                            'layout': (background_color, gradient[0]),
                            'launcher': (background_color, gradient[1]),
                            'silent': (background_color, gradient[2]),
                            'firefox': (background_color, gradient[3]),
                            'web': (background_color, gradient[4]),
                            }
                            ),              
               *double_powerline_arrow("r", *basic_r_arrow, background_color, gradient[6], transparent_color),  
               widget.Spacer(),
               *double_powerline_arrow("r", *basic_r_arrow, background_color, gradient[6], transparent_color), 

                *powerline_arrow("r", *basic_r_arrow, background_color, gradient[7]),
                widget.Image(filename='~/.config/qtile/icons/emblem-music.png',
				    background=gradient[7],
                    margin_x=8,
                       mouse_callbacks={
                        'Button1':lazy.spawn('bash /home/bastien/.config/qtile/pulse-audio-notify.sh mute'), 
                        'Button2':lazy.spawn('kitty -e pulsemixer'),
                        'Button3':lazy.spawn('kitty -e alsamixer'),
                        'Button4':lazy.spawn('bash /home/bastien/.config/qtile/pulse-audio-notify.sh up'), 
                        'Button5':lazy.spawn('bash /home/bastien/.config/qtile/pulse-audio-notify.sh down')
                    }),
               widget.Volume(
				    #theme_path = ['home/bastien/.config/qtile/icons/'],
                    fmt = '{} ',    
                    emoji = False,
                    foreground=font_color,
                    background=gradient[7],
                    volume_app='pulsemixer',
                    volume_down_command = 'bash /home/bastien/.config/qtile/pulse-audio-notify.sh down',
                    volume_up_command = 'bash /home/bastien/.config/qtile/pulse-audio-notify.sh up',
                    mute_command = 'bash /home/bastien/.config/qtile/pulse-audio-notify.sh mute',
					mouse_callbacks={
                        'Button3':lazy.spawn('kitty -e alsamixer')}),             
               *powerline_arrow("r", *basic_r_arrow, gradient[7], background_color),

                widget.Net(background=background_color, format="{up}"),
                widget.Image(filename='~/.config/qtile/icons/network-transmit-receive.png',
                    background=background_color), 
                widget.Net(background=background_color, format="{down}"),            
                *powerline_arrow("r", *basic_r_arrow, background_color, gradient[1]) ,

                widget.Memory(format='{MemUsed: .0f}{mm}',
					mouse_callbacks= {'Button1': lazy.spawn("kitty -e 'htop'")},
					background=gradient[1]
                    ),
                widget.Image(filename='~/.config/qtile/icons/system-run.png',
                    background=gradient[1]
                    ),                
                *powerline_arrow("r", *basic_r_arrow, gradient[1], background_color),	
                
                widget.CPU(format='{load_percent}%  ', 
					mouse_callbacks={'Button1':lazy.spawn('kitty -e bpytop')},
					foreground=font_color,
                    background=background_color,
                    ),
                widget.Image(filename='~/.config/qtile/icons/cpu.png',
                        background=background_color),
                widget.ThermalSensor(
					tag_sensor='Package id 0',
					mouse_callbacks={'Button1':lazy.spawn('kitty -e bpytop')},
					background=background_color,
                    ),
                *powerline_arrow("r", *basic_r_arrow, background_color, gradient[3]),	
               
               widget.DF(partition="/home/", 
					visible_on_warn=False, 
					format='~ {uf}{m}', 
					mouse_callbacks={'Button3':lazy.spawn('pcmanfm'), 'Button1':lazy.spawn('kitty -e ranger ~')},
					background=gradient[3]
                    ),
                widget.DF(partition="/", 
					visible_on_warn=False, 
					format='/ {uf}{m}', 
					mouse_callbacks={'Button3':lazy.spawn('pcmanfm'), 'Button1':lazy.spawn('kitty -e ranger /')},
					background=gradient[3]
                    ), 
                widget.Image(filename='~/.config/qtile/icons/hdd.png',
                    background=gradient[3]
                    ), 
                widget.DF(partition="", 
					visible_on_warn=False, 
					format='{uf}{m}', 
					mouse_callbacks={'Button3':lazy.spawn('pcmanfm'), 'Button1':lazy.spawn('kitty -e ranger /hdd')},
					background=gradient[3]
                    ),
                *powerline_arrow("r", *basic_r_arrow, gradient[3], background_color),
        
                widget.Clock(format="%a %d %b %H:%M",
                        background=background_color, 
                        padding=3, mouse_callbacks={'Button2':lazy.spawn('thunderbird -calendar')}),
                *powerline_arrow("r", *basic_r_arrow, background_color, gradient[5]),
              
              widget.Image(filename='~/.config/qtile/icons/system-shutdown.png',
                    mouse_callbacks= {'Button1': lazy.spawn('rofi -show power-menu -modi "power-menu:rofi-power-menu --choices=shutdown/reboot/logout/lockscreen"')},
                    background=gradient[5],
                    margin_x = 15
                    ),
                *powerline_arrow("r", *basic_r_arrow, gradient[5], transparent_color),


                ],
            panel_height,
            opacity=1,
            border_width=0,
            margin=[4, 4, 2, 4],
            border_color=background_color,
            background=transparent_color,
		),
	),
]
